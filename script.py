# Vytvoření kompletního file tree pro USB HID implementaci v mcp-prompts-rs

file_structure = {
    "Cargo.toml": {
        "description": "Dual-binary configuration s ESP32 závislostmi",
        "priority": "🔴 Kritické",
        "size": "~150 řádků",
        "features": ["std", "embedded", "hid", "composite-device"]
    },
    ".cargo/config.toml": {
        "description": "ESP32-S3 target configuration a runner setup",
        "priority": "🔴 Kritické", 
        "size": "~50 řádků",
        "content": "xtensa-esp32s3-none-elf target, espflash runner, WiFi env vars"
    },
    "src/embedded/main.rs": {
        "description": "ESP32 entry point s #![no_std] a async main",
        "priority": "🔴 Kritické",
        "size": "~200 řádků", 
        "content": "WiFi init, USB composite device, MCP server startup"
    },
    "src/hid/mod.rs": {
        "description": "USB HID module API",
        "priority": "🔴 Kritické",
        "size": "~100 řádků",
        "exports": ["HidKeyboard", "CompositeDevice", "HidError"]
    },
    "src/hid/keyboard.rs": {
        "description": "HID keyboard implementation s boot protocol",
        "priority": "🔴 Kritické", 
        "size": "~300 řádků",
        "features": ["send_string()", "send_key_report()", "boot protocol"]
    },
    "src/hid/layout.rs": {
        "description": "Mapování ASCII → USB HID keycodes",
        "priority": "🟡 Střední",
        "size": "~150 řádků",
        "content": "US keyboard layout, modifikátory, speciální klávesy"
    },
    "src/hid/composite.rs": {
        "description": "Composite USB device (HID + RNDIS + CDC)",
        "priority": "🔴 Kritické",
        "size": "~250 řádků", 
        "interfaces": ["HID keyboard", "RNDIS network", "CDC serial"]
    },
    "src/hid/descriptors.rs": {
        "description": "USB deskriptory pro HID a composite device",
        "priority": "🟡 Střední",
        "size": "~200 řádků",
        "content": "Boot keyboard descriptor, device descriptor, string descriptors"
    },
    "src/api/websocket.rs": {
        "description": "Unifikovaný WebSocket server (desktop + embedded)",
        "priority": "🔴 Kritické",
        "size": "~400 řádků",
        "features": ["Feature-gated tokio/embassy", "JSON-RPC 2.0", "MCP protocol"]
    },
    "src/api/mcp.rs": {
        "description": "Model Context Protocol implementace",
        "priority": "🟡 Střední", 
        "size": "~300 řádků",
        "content": "Prompt templates, variable substitution, HID output mode"
    },
    "src/storage/littlefs.rs": {
        "description": "LittleFS storage pro ESP32 (feature-gated)",
        "priority": "🟡 Střední",
        "size": "~200 řádků",
        "features": ["VFS bindings", "embedded prompts fallback"]
    },
    "src/embedded/prompts.rs": {
        "description": "Generated file s embedded prompt katalogem",
        "priority": "🟢 Rychlé",
        "size": "~500 řádků", 
        "content": "Static EMBEDDED_PROMPTS array, generated by export_catalog.ts"
    },
    "src/embedded/network.rs": {
        "description": "WiFi a USB RNDIS network setup",
        "priority": "🟡 Střední",
        "size": "~150 řádků",
        "features": ["WiFi client/AP mode", "RNDIS interface"]
    },
    "scripts/build_esp32.sh": {
        "description": "Complete ESP32 build pipeline",
        "priority": "🔴 Kritické",
        "size": "~100 řádků",
        "steps": ["toolchain check", "catalog export", "cross-compile", "size validation"]
    },
    "scripts/flash_esp32.sh": {
        "description": "ESP32 deployment automation",
        "priority": "🔴 Kritické", 
        "size": "~80 řádků",
        "features": ["port detection", "erase flash", "firmware upload", "monitor"]
    },
    "scripts/export_catalog.ts": {
        "description": "Convert JSON prompts → Rust const arrays",
        "priority": "🔴 Kritické",
        "size": "~200 řádků",
        "output": "src/embedded/prompts.rs with static arrays"
    },
    "tests/integration_hid.rs": {
        "description": "HID functionality integration tests",
        "priority": "🟡 Střední",
        "size": "~150 řádků", 
        "tests": ["boot protocol", "composite enumeration", "string sending"]
    },
    "examples/hid_demo.rs": {
        "description": "Standalone HID keyboard example",
        "priority": "🟢 Rychlé",
        "size": "~100 řádků",
        "content": "Basic keyboard demo for testing"
    },
    ".github/workflows/esp-build.yml": {
        "description": "CI/CD pro ESP32 cross-compilation",
        "priority": "🟡 Střední",
        "size": "~80 řádků",
        "features": ["Ubuntu runner", "espup install", "artifact upload"]
    },
    "README.md": {
        "description": "Updated documentation s HID usage",
        "priority": "🟢 Rychlé", 
        "size": "~300 řádků",
        "sections": ["Quick start", "USB HID mode", "Android support"]
    },
    "build.rs": {
        "description": "Build script s feature gates",
        "priority": "🟡 Střední",
        "size": "~50 řádků",
        "features": ["conditional compilation", "embedded resource bundling"]
    }
}

# Vypočítání statistik
total_files = len(file_structure)
critical_files = sum(1 for f in file_structure.values() if f["priority"] == "🔴 Kritické")
medium_files = sum(1 for f in file_structure.values() if f["priority"] == "🟡 Střední") 
quick_files = sum(1 for f in file_structure.values() if f["priority"] == "🟢 Rychlé")

print("📁 Kompletní file structure pro USB HID implementaci v mcp-prompts-rs")
print("=" * 80)
print(f"Celkem souborů: {total_files}")
print(f"🔴 Kritické (>3 dny): {critical_files}")
print(f"🟡 Střední (1-3 dny): {medium_files}") 
print(f"🟢 Rychlé (≤1 den): {quick_files}")
print()

# Detailní breakdown podle kategorií
categories = {
    "Core ESP32 Implementation": [
        "Cargo.toml", ".cargo/config.toml", "src/embedded/main.rs", 
        "src/embedded/prompts.rs", "src/embedded/network.rs"
    ],
    "USB HID Stack": [
        "src/hid/mod.rs", "src/hid/keyboard.rs", "src/hid/layout.rs",
        "src/hid/composite.rs", "src/hid/descriptors.rs"
    ],
    "MCP Integration": [
        "src/api/websocket.rs", "src/api/mcp.rs", "src/storage/littlefs.rs"
    ],
    "Build & Deploy": [
        "scripts/build_esp32.sh", "scripts/flash_esp32.sh", 
        "scripts/export_catalog.ts", "build.rs"
    ],
    "Testing & Documentation": [
        "tests/integration_hid.rs", "examples/hid_demo.rs",
        ".github/workflows/esp-build.yml", "README.md"
    ]
}

for category, files in categories.items():
    print(f"\n📂 {category}")
    print("-" * 60)
    for file in files:
        if file in file_structure:
            info = file_structure[file]
            print(f"{info['priority']} {file:<35} | {info['description']}")

print("\n" + "="*80)
print("🎯 Implementační priority:")
print("1. Nejdříve kritické soubory (červené) - základ funkčnosti")
print("2. Potom střední (žluté) - rozšířené features") 
print("3. Nakonec rychlé (zelené) - dokumentace a příklady")
print()
print("⏱️ Odhadovaný čas celkové implementace: 3-4 týdny")
print("💾 Odhadovaná velikost finálního firmware: < 3MB pro 8MB flash")